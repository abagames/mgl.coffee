// Generated by CoffeeScript 1.7.1
var A, Actor, ActorGroup, C, Color, Config, Display, Drawing, DrawingRect, Fiber, G, Game, Key, Letter, M, Mouse, PI, Particle, ParticleActor, Random, Sound, Text, TextActor, Vector, abs, atan2, ceil, cos, floor, max, min, requestAnimFrame, sin, sqrt,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.onload = function() {
  return Game.initialize();
};

Function.prototype.getter = function(prop, get) {
  return Object.defineProperty(this.prototype, prop, {
    get: get,
    configurable: true
  });
};

Function.prototype.setter = function(prop, set) {
  return Object.defineProperty(this.prototype, prop, {
    set: set,
    configurable: true
  });
};

Function.prototype.classGetter = function(prop, get) {
  return Object.defineProperty(this, prop, {
    get: get,
    configurable: true
  });
};

Function.prototype.classSetter = function(prop, set) {
  return Object.defineProperty(this, prop, {
    set: set,
    configurable: true
  });
};

Game = (function() {
  function Game() {}

  Game.end = function() {
    return this.e;
  };

  Game.classGetter('e', function() {
    if (!this.ib) {
      return false;
    }
    if (typeof window.endGame === "function") {
      window.endGame();
    }
    this.beginTitle();
    return true;
  });

  Game.drawText = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Display.drawText.apply(Display, args);
  };

  Game.dt = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Display.drawText.apply(Display, args);
  };

  Game.fillRect = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Display.fillRect.apply(Display, args);
  };

  Game.fr = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Display.fillRect.apply(Display, args);
  };

  Game.getDifficulty = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.df.apply(this, args);
  };

  Game.df = function(speed, scale) {
    if (speed == null) {
      speed = 1;
    }
    if (scale == null) {
      scale = 1;
    }
    return sqrt(this.t * speed * 0.0001) * scale + 1;
  };

  Game.newDrawing = function() {
    return this.nd;
  };

  Game.classGetter('nd', function() {
    return new Drawing;
  });

  Game.newFiber = function() {
    return this.nf;
  };

  Game.classGetter('nf', function() {
    var f;
    f = new Fiber;
    this.fibers.push(f);
    return f;
  });

  Game.newParticle = function() {
    return this.np;
  };

  Game.classGetter('np', function() {
    return new Particle;
  });

  Game.newRandom = function() {
    return this.nr;
  };

  Game.classGetter('nr', function() {
    return new Random;
  });

  Game.newSound = function() {
    return this.ns;
  };

  Game.classGetter('ns', function() {
    return new Sound;
  });

  Game.newText = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.nt.apply(this, args);
  };

  Game.nt = function(text) {
    return new Text(text);
  };

  Game.newVector = function() {
    return this.nv;
  };

  Game.classGetter('nv', function() {
    return new Vector;
  });

  Game.classGetter('ticks', function() {
    return this.t;
  });

  Game.classGetter('score', function() {
    return this.sc;
  });

  Game.classSetter('score', function(v) {
    return this.sc = v;
  });

  Game.classGetter('isBeginning', function() {
    return this.ib;
  });

  Game.classGetter('random', function() {
    return this.r;
  });

  Game.initialize = function() {
    var ca;
    this.t = 0;
    this.sc = 0;
    this.ib = false;
    this.r = new Random;
    this.INTERVAL = 1000 / Config.fps;
    this.delta = 0;
    this.currentTime = this.prevTime = 0;
    this.isPaused = false;
    Display.initialize();
    Key.initialize();
    Mouse.initialize();
    Sound.initialize();
    window.onblur = (function(_this) {
      return function(e) {
        _this.isPaused = true;
        Display.clear();
        return Display.drawText('PAUSED', 0.5, 0.5, 0, 0);
      };
    })(this);
    window.onfocus = (function(_this) {
      return function(e) {
        return _this.onfocus();
      };
    })(this);
    ca = Config.captureArgs;
    if (ca != null) {
      Display.beginCapture.apply(Display, ca);
    }
    if (typeof window.initialize === "function") {
      window.initialize();
    }
    if (Config.isDebuggingMode) {
      this.beginGame();
      this.lastFrameTime = new Date().getTime();
      this.fps = this.fpsCount = 0;
    } else {
      this.initializeGame();
      this.beginTitle();
    }
    return requestAnimFrame(this.updateFrame);
  };

  Game.onfocus = function() {
    if (!this.isPaused) {
      return;
    }
    this.isPaused = false;
    return this.postUpdate();
  };

  Game.beginTitle = function() {
    var ty;
    this.ib = false;
    ty = Config.title.length === 1 ? .4 : .35;
    new Text(Config.title[0]).xy(.5, ty).sc(3).df;
    if (Config.title.length > 1) {
      new Text(Config.title[1]).xy(.5, .45).sc(3).df;
    }
    new Text('[ CLICK / TOUCH ] TO START').xy(.5, .6).df;
    return Mouse.setPressedDisabledCount(10);
  };

  Game.beginGame = function() {
    this.ib = true;
    this.sc = 0;
    if (typeof window.beginGame === "function") {
      window.beginGame();
    }
    return this.initializeGame();
  };

  Game.initializeGame = function() {
    Actor.clear();
    Sound.reset();
    this.fibers = [];
    this.t = 0;
    return typeof window.begin === "function" ? window.begin() : void 0;
  };

  Game.preUpdate = function(time) {
    if (time != null) {
      this.currentTime = time;
    } else {
      this.currentTime = new Date().getTime();
    }
    this.delta += (this.currentTime - this.prevTime) / this.INTERVAL;
    this.prevTime = this.currentTime;
    if (this.delta >= 0.75) {
      return true;
    }
    requestAnimFrame(this.updateFrame);
    return false;
  };

  Game.updateFrame = function(time) {
    var f, _i, _len, _ref;
    if (Game.isPaused) {
      return;
    }
    if (!(Game.preUpdate(time))) {
      return;
    }
    Display.preUpdate();
    Mouse.update();
    if (typeof window.update === "function") {
      window.update();
    }
    Actor.update();
    Sound.update();
    _ref = Game.fibers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      f.update();
    }
    Display.drawText("" + Game.sc, 1, 0, 1);
    Game.postUpdate();
    Game.t++;
    if (!Game.ib) {
      Game.updateTitle();
    }
    if (Config.isDebuggingMode) {
      Game.calcFps();
      Display.drawText("FPS:" + Game.fps, 0, 0.97);
      return Display.drawText("ACTOR#:" + Actor.number, 0.2, 0.97);
    }
  };

  Game.postUpdate = function() {
    this.delta = 0;
    return requestAnimFrame(this.updateFrame);
  };

  Game.updateTitle = function() {
    if (Mouse.ipd) {
      return this.beginGame();
    }
  };

  Game.calcFps = function() {
    var currentTime, delta;
    this.fpsCount++;
    currentTime = new Date().getTime();
    delta = currentTime - this.lastFrameTime;
    if (delta >= 1000) {
      this.fps = floor(this.fpsCount * 1000 / delta);
      this.lastFrameTime = currentTime;
      return this.fpsCount = 0;
    }
  };

  return Game;

})();

requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
  return window.setTimeout(callback, Game.INTERVAL / 2);
};

Display = (function() {
  function Display() {}

  Display.initialize = function() {
    this.e = $('#display')[0];
    Letter.initialize();
    this.size = new Vector;
    this.setSize();
    return window.onresize = (function(_this) {
      return function() {
        if (_this.resizeTimer != null) {
          clearTimeout(_this.resizeTimer);
        }
        return _this.resizeTimer = setTimeout(_this.setSize, 200);
      };
    })(this);
  };

  Display.setSize = function() {
    var cw;
    cw = $('#displayDiv')[0].clientWidth;
    Display.e.width = Display.e.height = cw;
    Display.size.xy(cw, cw);
    Display.c = Display.e.getContext('2d');
    return Letter.setSize(Display.size);
  };

  Display.clear = function() {
    this.c.fillStyle = Config.backgroundColor;
    return this.c.fillRect(0, 0, this.size.x, this.size.y);
  };

  Display.drawText = function(text, x, y, alignX, alignY, color, scale) {
    if (alignX == null) {
      alignX = -1;
    }
    if (alignY == null) {
      alignY = -1;
    }
    if (color == null) {
      color = Color.white;
    }
    if (scale == null) {
      scale = 1;
    }
    return Letter.draw(text, x, y, alignX, alignY, color, scale);
  };

  Display.fillRect = function(x, y, width, height, color) {
    if (color == null) {
      color = Color.white;
    }
    this.c.fillStyle = color.toString();
    return this.c.fillRect(floor((x - width / 2) * this.size.x), floor((y - height / 2) * this.size.y), floor(width * this.size.x), floor(height * this.size.y));
  };

  Display.fillRectDirect = function(x, y, width, height, color) {
    if (color == null) {
      color = Color.white;
    }
    this.c.fillStyle = color.toString();
    return this.c.fillRect(x, y, width, height);
  };

  Display.beginCapture = function(scale, durationSec, intervalSec) {
    var ctx, cvs, i, _i, _ref;
    if (scale == null) {
      scale = 1;
    }
    if (durationSec == null) {
      durationSec = 3;
    }
    if (intervalSec == null) {
      intervalSec = 0.05;
    }
    this.captureDuration = floor(durationSec / intervalSec);
    this.captureInterval = floor(intervalSec * 1000);
    this.captureIntervalTick = floor(intervalSec * Config.fps);
    this.captureContexts = [];
    this.isCaptured = [];
    for (i = _i = 1, _ref = this.captureDuration; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      cvs = document.createElement('canvas');
      cvs.width = this.size.x * scale;
      cvs.height = this.size.y * scale;
      ctx = cvs.getContext("2d");
      ctx.scale(scale, scale);
      this.captureContexts.push(ctx);
      this.isCaptured.push(false);
    }
    this.captureCanvasIndex = 0;
    this.isEndCapturing = false;
    return this.isCapturing = true;
  };

  Display.capture = function() {
    this.captureContexts[this.captureCanvasIndex].drawImage(this.e, 0, 0);
    this.isCaptured[this.captureCanvasIndex] = true;
    return this.captureCanvasIndex = (this.captureCanvasIndex + 1).lr(0, this.captureDuration);
  };

  Display.endCapture = function() {
    var binaryGif, encoder, i, idx, _i, _ref;
    this.isCapturing = false;
    encoder = new GIFEncoder;
    encoder.setRepeat(0);
    encoder.setDelay(this.captureInterval);
    encoder.start();
    idx = this.captureCanvasIndex;
    for (i = _i = 1, _ref = this.captureDuration; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      if (this.isCaptured[idx]) {
        encoder.addFrame(this.captureContexts[idx]);
      }
      idx = (idx + 1).lr(0, this.captureDuration);
    }
    encoder.finish();
    binaryGif = encoder.stream().getData();
    return window.location.href = 'data:image/gif;base64,' + (encode64(binaryGif));
  };

  Display.preUpdate = function() {
    if (this.isEndCapturing) {
      this.endCapture();
    }
    if (this.isCapturing && G.t % this.captureIntervalTick === 0) {
      this.capture();
    }
    this.clear();
    if (this.isCapturing && Key.ip[67]) {
      this.drawText('CAPTURING...', .5, .5, 0);
      return this.isEndCapturing = true;
    }
  };

  return Display;

})();

Actor = (function() {
  Actor.s = function(targetClass) {
    var className, g, _i, _len, _ref;
    className = ('' + targetClass).replace(/^\s*function\s*([^\(]*)[\S\s]+$/im, '$1');
    _ref = this.groups;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      g = _ref[_i];
      if (g.name === className) {
        return g.s;
      }
    }
    return [];
  };

  Actor.scroll = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.sc.apply(this, args);
  };

  Actor.sc = function(targetClasses, ox, oy, minX, maxX, minY, maxY) {
    var a, actors, tc, tcs, _i, _len, _results;
    if (oy == null) {
      oy = 0;
    }
    if (minX == null) {
      minX = 0;
    }
    if (maxX == null) {
      maxX = 0;
    }
    if (minY == null) {
      minY = 0;
    }
    if (maxY == null) {
      maxY = 0;
    }
    tcs = targetClasses instanceof Array ? targetClasses : [targetClasses];
    _results = [];
    for (_i = 0, _len = tcs.length; _i < _len; _i++) {
      tc = tcs[_i];
      actors = this.s(tc);
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = actors.length; _j < _len1; _j++) {
          a = actors[_j];
          a.p.x += ox;
          a.p.y += oy;
          if (minX < maxX) {
            a.p.x = a.p.x.lr(minX, maxX);
          }
          if (minY < maxY) {
            _results1.push(a.p.y = a.p.y.lr(minY, maxY));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  Actor.prototype.remove = function() {
    return this.r;
  };

  Actor.getter('r', function() {
    return this.isRemoving = true;
  });

  Actor.prototype.setDisplayPriority = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.dp.apply(this, args);
  };

  Actor.prototype.dp = function(displayPriority) {
    this.group.displayPriority = displayPriority;
    return Actor.sortGroups();
  };

  Actor.prototype.onCollision = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.oc.apply(this, args);
  };

  Actor.prototype.oc = function(targetClass, handler) {
    var cca, collideCheckedActors, isCollided, _i, _len;
    if (handler == null) {
      handler = null;
    }
    isCollided = false;
    collideCheckedActors = Actor.s(targetClass);
    for (_i = 0, _len = collideCheckedActors.length; _i < _len; _i++) {
      cca = collideCheckedActors[_i];
      if (this.d.isCollided(cca.d)) {
        isCollided = true;
        if (typeof handler === "function") {
          handler(cca);
        }
      }
    }
    return isCollided;
  };

  Actor.prototype.newDrawing = function() {
    return this.nd;
  };

  Actor.getter('nd', function() {
    return new Drawing;
  });

  Actor.prototype.newFiber = function() {
    return this.nf;
  };

  Actor.getter('nf', function() {
    var f;
    f = new Fiber;
    f.a = this;
    this.fibers.push(f);
    return f;
  });

  Actor.prototype.newParticle = function() {
    return this.np;
  };

  Actor.getter('np', function() {
    var p;
    p = new Particle;
    p.p(this.p);
    return p;
  });

  Actor.prototype.newRandom = function() {
    return this.nr;
  };

  Actor.getter('nr', function() {
    return new Random;
  });

  Actor.prototype.newSound = function() {
    return this.ns;
  };

  Actor.getter('ns', function() {
    return new Sound;
  });

  Actor.prototype.newText = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.nt.apply(this, args);
  };

  Actor.prototype.nt = function(text) {
    var t;
    t = new Text(text);
    t.p(this.p);
    return t;
  };

  Actor.prototype.newVector = function() {
    return this.nv;
  };

  Actor.getter('nv', function() {
    return new Vector;
  });

  Actor.getter('pos', function() {
    return this.p;
  });

  Actor.setter('pos', function(v) {
    return this.p = v;
  });

  Actor.getter('vel', function() {
    return this.v;
  });

  Actor.setter('vel', function(v) {
    return this.v = v;
  });

  Actor.getter('way', function() {
    return this.w;
  });

  Actor.setter('way', function(v) {
    return this.w = v;
  });

  Actor.getter('speed', function() {
    return this.s;
  });

  Actor.setter('speed', function(v) {
    return this.s = v;
  });

  Actor.getter('ticks', function() {
    return this.t;
  });

  Actor.setter('ticks', function(v) {
    return this.t = v;
  });

  Actor.getter('drawing', function() {
    return this.d;
  });

  Actor.setter('drawing', function(v) {
    return this.d = v;
  });

  Actor.getter('ir', function() {
    return this.isRemoving;
  });

  Actor.prototype.i = function() {};

  Actor.prototype.b = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  Actor.prototype.u = function() {};

  Actor.clear = function() {
    var g, _i, _len, _ref, _results;
    if (this.groups == null) {
      this.groups = [];
    }
    _ref = this.groups;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      g = _ref[_i];
      _results.push(g.clear());
    }
    return _results;
  };

  Actor.update = function() {
    var g, _i, _j, _len, _len1, _ref, _ref1;
    if (Config.isDebuggingMode) {
      Actor.number = 0;
      _ref = this.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        g = _ref[_i];
        g.update();
        Actor.number += g.s.length;
      }
    } else {
      _ref1 = this.groups;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        g = _ref1[_j];
        g.update();
      }
    }
  };

  Actor.sortGroups = function() {
    return this.groups.sort(function(v1, v2) {
      return v1.displayPriority - v2.displayPriority;
    });
  };

  function Actor() {
    var args, className, g, _i, _len, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.initialize != null) {
      this.i = this.initialize;
    }
    if (this.begin != null) {
      this.b = this.begin;
    }
    if (this.update != null) {
      this.u = this.update;
    }
    this.p = new Vector;
    this.v = new Vector;
    this.w = 0;
    this.s = 0;
    this.t = 0;
    this.d = new Drawing;
    this.fibers = [];
    this.isRemoving = false;
    className = ('' + this.constructor).replace(/^\s*function\s*([^\(]*)[\S\s]+$/im, '$1');
    _ref = Actor.groups;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      g = _ref[_i];
      if (g.name === className) {
        this.group = g;
        break;
      }
    }
    if (this.group == null) {
      this.group = new ActorGroup(className);
      Actor.groups.push(this.group);
      Actor.sortGroups();
      this.i();
    }
    this.group.s.push(this);
    this.b.apply(this, args);
  }

  Actor.prototype.postUpdate = function() {
    var f, _i, _len, _ref;
    this.p.a(this.v);
    this.p.aw(this.w, this.s);
    _ref = this.fibers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      f.update();
    }
    this.d.p(this.p).w(this.w).d;
    return this.t++;
  };

  return Actor;

})();

ActorGroup = (function() {
  function ActorGroup(name) {
    this.name = name;
    this.clear();
    this.displayPriority = 1;
  }

  ActorGroup.prototype.clear = function() {
    return this.s = [];
  };

  ActorGroup.prototype.update = function() {
    var a, i;
    i = 0;
    while (true) {
      if (i >= this.s.length) {
        break;
      }
      a = this.s[i];
      if (!a.isRemoving) {
        a.u();
      }
      if (a.isRemoving) {
        this.s.splice(i, 1);
      } else {
        a.postUpdate();
        i++;
      }
    }
  };

  return ActorGroup;

})();

Drawing = (function() {
  Drawing.prototype.setColor = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.c.apply(this, args);
  };

  Drawing.prototype.c = function(color) {
    this.color = color;
    return this;
  };

  Drawing.prototype.addRect = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.r.apply(this, args);
  };

  Drawing.prototype.r = function(width, height, ox, oy) {
    if (height == null) {
      height = 0;
    }
    if (ox == null) {
      ox = 0;
    }
    if (oy == null) {
      oy = 0;
    }
    this.lastAdded = {
      type: 'rect',
      color: this.color,
      width: width,
      height: height,
      offsetX: ox,
      offsetY: oy
    };
    if (height === 0) {
      height = width;
    }
    this.s.push(new DrawingRect(this.color, width, height, ox, oy, this.hasCollision));
    return this;
  };

  Drawing.prototype.addRects = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.rs.apply(this, args);
  };

  Drawing.prototype.rs = function(width, height, ox, oy, way) {
    var i, n, o, tw, vo, w, _i;
    if (ox == null) {
      ox = 0;
    }
    if (oy == null) {
      oy = 0;
    }
    if (way == null) {
      way = 0;
    }
    this.lastAdded = {
      type: 'rects',
      color: this.color,
      width: width,
      height: height,
      offsetX: ox,
      offsetY: oy,
      way: way
    };
    w = way * PI / 180;
    if (width > height) {
      w += PI / 2;
      tw = width;
      width = height;
      height = tw;
    }
    if (width < 0.01) {
      return this;
    }
    n = floor(height / width);
    o = -width * (n - 1) / 2;
    vo = width;
    width *= 1.05;
    for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
      this.s.push(new DrawingRect(this.color, width, width, sin(w) * o + ox, cos(w) * o + oy, this.hasCollision));
      o += vo;
    }
    return this;
  };

  Drawing.prototype.addRotate = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.rt.apply(this, args);
  };

  Drawing.prototype.rt = function(angle, number) {
    var i, o, w, _i;
    if (number == null) {
      number = 1;
    }
    o = new Vector().xy(this.lastAdded.offsetX, this.lastAdded.offsetY);
    w = this.lastAdded.way;
    for (i = _i = 1; 1 <= number ? _i <= number : _i >= number; i = 1 <= number ? ++_i : --_i) {
      o.rt(angle);
      switch (this.lastAdded.type) {
        case 'rect':
          this.r(this.lastAdded.width, this.lastAdded.height, o.x, o.y);
          break;
        case 'rects':
          w -= angle;
          this.rs(this.lastAdded.width, this.lastAdded.height, o.x, o.y, w);
      }
    }
    return this;
  };

  Drawing.prototype.addMirrorX = function() {
    return this.mx;
  };

  Drawing.getter('mx', function() {
    switch (this.lastAdded.type) {
      case 'rect':
        this.r(this.lastAdded.width, this.lastAdded.height, -this.lastAdded.offsetX, this.lastAdded.offsetY);
        break;
      case 'rects':
        this.rs(this.lastAdded.width, this.lastAdded.height, -this.lastAdded.offsetX, this.lastAdded.offsetY, -this.lastAdded.way);
    }
    return this;
  });

  Drawing.prototype.addMirrorX = function() {
    return this.my;
  };

  Drawing.getter('my', function() {
    switch (this.lastAdded.type) {
      case 'rect':
        this.r(this.lastAdded.width, this.lastAdded.height, this.lastAdded.offsetX, -this.lastAdded.offsetY);
        break;
      case 'rects':
        this.rs(this.lastAdded.width, this.lastAdded.height, this.lastAdded.offsetX, -this.lastAdded.offsetY, -this.lastAdded.way);
    }
    return this;
  });

  Drawing.prototype.setPos = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.p.apply(this, args);
  };

  Drawing.prototype.p = function(p) {
    this.pos.v(p);
    return this;
  };

  Drawing.prototype.setXy = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.xy.apply(this, args);
  };

  Drawing.prototype.xy = function(x, y) {
    this.pos.xy(x, y);
    return this;
  };

  Drawing.prototype.setWay = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.w.apply(this, args);
  };

  Drawing.prototype.w = function(w) {
    this.way = w;
    return this;
  };

  Drawing.prototype.setScale = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.sc.apply(this, args);
  };

  Drawing.prototype.sc = function(x, y) {
    if (y == null) {
      y = -9999999;
    }
    if (y === -9999999) {
      y = x;
    }
    this.scale.xy(x, y);
    return this;
  };

  Drawing.prototype.draw = function() {
    return this.d;
  };

  Drawing.getter('d', function() {
    var r, _i, _len, _ref;
    _ref = this.s;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      r = _ref[_i];
      r.draw(this);
    }
    return this;
  });

  Drawing.prototype.enableCollision = function() {
    return this.ec;
  };

  Drawing.getter('ec', function() {
    this.hasCollision = true;
    return this;
  });

  Drawing.prototype.disableCollision = function() {
    return this.dc;
  };

  Drawing.getter('dc', function() {
    this.hasCollision = false;
    return this;
  });

  Drawing.prototype.onCollision = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.oc.apply(this, args);
  };

  Drawing.prototype.oc = function(targetClass, handler) {
    var cca, collideCheckedActors, isCollided, _i, _len;
    if (handler == null) {
      handler = null;
    }
    this.updateState();
    isCollided = false;
    collideCheckedActors = Actor.s(targetClass);
    for (_i = 0, _len = collideCheckedActors.length; _i < _len; _i++) {
      cca = collideCheckedActors[_i];
      if (this.isCollided(cca.d)) {
        isCollided = true;
        if (typeof handler === "function") {
          handler(cca);
        }
      }
    }
    return isCollided;
  };

  Drawing.prototype.clear = function() {
    return this.cl;
  };

  Drawing.getter('cl', function() {
    this.s = [];
    return this;
  });

  function Drawing() {
    this.s = [];
    this.pos = new Vector;
    this.way = 0;
    this.scale = new Vector(1, 1);
    this.hasCollision = true;
    this.color = Color.white;
  }

  Drawing.prototype.updateState = function() {
    var r, _i, _len, _ref;
    _ref = this.s;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      r = _ref[_i];
      r.updateState(this);
    }
    return this;
  };

  Drawing.prototype.isCollided = function(d) {
    var dr, isCollided, r, _i, _j, _len, _len1, _ref, _ref1;
    isCollided = false;
    _ref = this.s;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      r = _ref[_i];
      _ref1 = d.s;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        dr = _ref1[_j];
        if (r.isCollided(dr)) {
          isCollided = true;
        }
      }
    }
    return isCollided;
  };

  return Drawing;

})();

DrawingRect = (function() {
  function DrawingRect(color, width, height, ox, oy, hasCollision) {
    this.color = color;
    this.hasCollision = hasCollision;
    this.size = new Vector(width, height);
    this.offset = new Vector(ox, oy);
    this.currentPos = new Vector;
    this.currentSize = new Vector;
  }

  DrawingRect.prototype.updateState = function(d) {
    this.currentPos.v(this.offset);
    this.currentPos.x *= d.scale.x;
    this.currentPos.y *= d.scale.y;
    this.currentPos.rt(d.way);
    this.currentPos.a(d.pos);
    return this.currentSize.xy(this.size.x * d.scale.x, this.size.y * d.scale.y);
  };

  DrawingRect.prototype.draw = function(d) {
    this.updateState(d);
    return Display.fillRect(this.currentPos.x, this.currentPos.y, this.currentSize.x, this.currentSize.y, this.color);
  };

  DrawingRect.prototype.isCollided = function(r) {
    if (!this.hasCollision) {
      return false;
    }
    return (abs(this.currentPos.x - r.currentPos.x)) < (this.currentSize.x + r.currentSize.x) / 2 && (abs(this.currentPos.y - r.currentPos.y)) < (this.currentSize.y + r.currentSize.y) / 2;
  };

  return DrawingRect;

})();

Fiber = (function() {
  Fiber.prototype.doRepeat = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.dr.apply(this, args);
  };

  Fiber.prototype.dr = function(func) {
    this.funcs.push(func);
    return this;
  };

  Fiber.prototype.doOnce = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.d.apply(this, args);
  };

  Fiber.prototype.d = function(func) {
    this.funcs.push((function(_this) {
      return function() {
        func.call(_this);
        return _this.n;
      };
    })(this));
    return this;
  };

  Fiber.prototype.wait = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.w.apply(this, args);
  };

  Fiber.prototype.w = function(ticks) {
    this.funcs.push((function(_this) {
      return function() {
        _this.ticks = ticks;
        return _this.n;
      };
    })(this));
    this.funcs.push((function(_this) {
      return function() {
        if (--_this.ticks < 0) {
          return _this.n;
        }
      };
    })(this));
    return this;
  };

  Fiber.prototype.next = function() {
    return this.n;
  };

  Fiber.getter('n', function() {
    if (++this.funcIndex >= this.funcs.length) {
      this.funcIndex = 0;
    }
    return this;
  });

  function Fiber() {
    this.funcs = [];
    this.funcIndex = 0;
  }

  Fiber.prototype.update = function() {
    return this.funcs[this.funcIndex].call(this);
  };

  return Fiber;

})();

Color = (function() {
  function Color(rv, gv, bv) {
    this.rv = rv;
    this.gv = gv;
    this.bv = bv;
  }

  Color.d = new Color(0, 0, 0);

  Color.dark = new Color(0, 0, 0);

  Color.r = new Color(1, 0, 0);

  Color.red = new Color(1, 0, 0);

  Color.g = new Color(0, 1, 0);

  Color.green = new Color(0, 1, 0);

  Color.b = new Color(0, 0, 1);

  Color.blue = new Color(0, 0, 1);

  Color.y = new Color(1, 1, 0);

  Color.yellow = new Color(1, 1, 0);

  Color.m = new Color(1, 0, 1);

  Color.magenta = new Color(1, 0, 1);

  Color.c = new Color(0, 1, 1);

  Color.cyan = new Color(0, 1, 1);

  Color.w = new Color(1, 1, 1);

  Color.white = new Color(1, 1, 1);

  Color.prototype.toString = function() {
    var b, g, r, v0, v1;
    v1 = 250;
    v0 = 0;
    r = floor(this.rv * v1 + v0);
    g = floor(this.gv * v1 + v0);
    b = floor(this.bv * v1 + v0);
    return "rgb(" + r + "," + g + "," + b + ")";
  };

  return Color;

})();

Text = (function() {
  Text.prototype.setPos = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.p.apply(this, args);
  };

  Text.prototype.p = function(pos) {
    this.a.p.v(pos);
    return this;
  };

  Text.prototype.setXy = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.xy.apply(this, args);
  };

  Text.prototype.xy = function(x, y) {
    this.a.p.xy(x, y);
    return this;
  };

  Text.prototype.setVelocity = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.v.apply(this, args);
  };

  Text.prototype.v = function(x, y) {
    this.a.v.xy(x, y);
    return this;
  };

  Text.prototype.setDuration = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.d.apply(this, args);
  };

  Text.prototype.d = function(duration) {
    this.a.duration = duration;
    return this;
  };

  Text.prototype.displayedForever = function() {
    return this.df;
  };

  Text.getter('df', function() {
    this.a.duration = 9999999;
    return this;
  });

  Text.prototype.alignLeft = function() {
    return this.al;
  };

  Text.getter('al', function() {
    this.a.xAlign = -1;
    return this;
  });

  Text.prototype.alignRight = function() {
    return this.ar;
  };

  Text.getter('ar', function() {
    this.a.xAlign = 1;
    return this;
  });

  Text.prototype.setColor = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.c.apply(this, args);
  };

  Text.prototype.c = function(color) {
    this.a.color = color;
    return this;
  };

  Text.prototype.setScale = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.sc.apply(this, args);
  };

  Text.prototype.sc = function(scale) {
    this.a.scale = scale;
    return this;
  };

  Text.prototype.showOnce = function() {
    return this.so;
  };

  Text.getter('so', function() {
    if ((Text.shownTexts.indexOf(this.a.text)) >= 0) {
      this.a.text = '';
      this.a.r;
    } else {
      Text.shownTexts.push(this.a.text);
    }
    return this;
  });

  function Text(text) {
    this.a = new TextActor;
    this.a.text = text;
  }

  Text.shownTexts = [];

  return Text;

})();

TextActor = (function(_super) {
  __extends(TextActor, _super);

  function TextActor() {
    return TextActor.__super__.constructor.apply(this, arguments);
  }

  TextActor.prototype.initialize = function() {
    return this.setDisplayPriority(2);
  };

  TextActor.prototype.begin = function() {
    this.duration = 1;
    this.xAlign = 0;
    this.color = Color.white;
    return this.scale = 1;
  };

  TextActor.prototype.update = function() {
    if (this.t === 0) {
      this.v.d(this.duration);
    }
    Display.drawText(this.text, this.p.x, this.p.y, this.xAlign, 0, this.color, this.scale);
    if (this.t >= this.duration - 1) {
      return this.r;
    }
  };

  return TextActor;

})(Actor);

Letter = (function() {
  function Letter() {}

  Letter.initialize = function() {
    var c, charStr, ci, d, dots, i, j, k, li, p, pIndex, patterns, _i, _j, _k, _l, _ref, _results;
    this.COUNT = 66;
    patterns = [0x4644AAA4, 0x6F2496E4, 0xF5646949, 0x167871F4, 0x2489F697, 0xE9669696, 0x79F99668, 0x91967979, 0x1F799976, 0x1171FF17, 0xF99ED196, 0xEE444E99, 0x53592544, 0xF9F11119, 0x9DDB9999, 0x79769996, 0x7ED99611, 0x861E9979, 0x994444E7, 0x46699699, 0x6996FD99, 0xF4469999, 0x2224F248, 0x26244424, 0x64446622, 0x84284248, 0x40F0F024, 0x0F0044E4, 0x480A4E40, 0x9A459124, 0x000A5A16, 0x640444F0, 0x80004049, 0x40400004, 0x44444040, 0x0AA00044, 0x6476E400, 0xFAFA61D9, 0xE44E4EAA, 0x24F42445, 0xF244E544, 0x00000042];
    p = 0;
    d = 32;
    pIndex = 0;
    this.dotPatterns = [];
    for (i = _i = 1, _ref = this.COUNT; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      dots = [];
      for (j = _j = 1; _j <= 5; j = ++_j) {
        for (k = _k = 1; _k <= 4; k = ++_k) {
          if (++d >= 32) {
            p = patterns[pIndex++];
            d = 0;
          }
          if (p & 1 > 0) {
            dots.push(new Vector().xy(k, j));
          }
          p >>= 1;
        }
      }
      this.dotPatterns.push(dots);
    }
    charStr = "()[]<>=+-*/%&_!?,.:|'\"$@#\\urdl";
    this.charToIndex = [];
    _results = [];
    for (c = _l = 0; _l <= 127; c = ++_l) {
      li = c === 32 ? -1 : (48 <= c && c < 58) ? c - 48 : (65 <= c && c < 90) ? c - 65 + 10 : (ci = charStr.indexOf(String.fromCharCode(c)), ci >= 0 ? ci + 36 : -2);
      _results.push(this.charToIndex.push(li));
    }
    return _results;
  };

  Letter.setSize = function(size) {
    return this.baseDotSize = floor((min(size.x, size.y)) / 250 + 1).c(1, 20);
  };

  Letter.draw = function(text, x, y, xAlign, yAlign, color, scale) {
    var c, li, lw, size, tx, ty, _i, _len;
    tx = floor(x * Display.size.x);
    ty = floor(y * Display.size.y);
    size = this.baseDotSize * scale;
    lw = size * 5;
    if (xAlign === 0) {
      tx -= floor(text.length * lw / 2);
    } else if (xAlign === 1) {
      tx -= floor(text.length * lw);
    }
    if (yAlign === 0) {
      ty -= size * 3;
    }
    for (_i = 0, _len = text.length; _i < _len; _i++) {
      c = text[_i];
      li = this.charToIndex[c.charCodeAt(0)];
      if (li >= 0) {
        this.drawDots(li, tx, ty, color, size);
      } else if (li === -2) {
        throw "invalid char: " + c;
      }
      tx += lw;
    }
  };

  Letter.drawDots = function(li, x, y, color, size) {
    var p, _i, _len, _ref;
    _ref = this.dotPatterns[li];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      Display.fillRectDirect(x + p.x * size, y + p.y * size, size, size, color);
    }
  };

  return Letter;

})();

Particle = (function() {
  Particle.prototype.setPos = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.p.apply(this, args);
  };

  Particle.prototype.p = function(pos) {
    this.pos = pos;
    return this;
  };

  Particle.prototype.setXy = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.xy.apply(this, args);
  };

  Particle.prototype.xy = function(x, y) {
    this.pos = new Vector().xy(x, y);
    return this;
  };

  Particle.prototype.setNumber = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.n.apply(this, args);
  };

  Particle.prototype.n = function(number) {
    this.number = number;
    return this;
  };

  Particle.prototype.setWay = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.w.apply(this, args);
  };

  Particle.prototype.w = function(way, wayWidth) {
    this.way = way;
    this.wayWidth = wayWidth;
    return this;
  };

  Particle.prototype.setSpeed = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.s.apply(this, args);
  };

  Particle.prototype.s = function(speed) {
    this.speed = speed;
    return this;
  };

  Particle.prototype.setColor = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.c.apply(this, args);
  };

  Particle.prototype.c = function(color) {
    this.color = color;
    return this;
  };

  Particle.prototype.setSize = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.sz.apply(this, args);
  };

  Particle.prototype.sz = function(size) {
    this.size = size;
    return this;
  };

  Particle.prototype.setDuration = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.d.apply(this, args);
  };

  Particle.prototype.d = function(duration) {
    this.duration = duration;
    return this;
  };

  function Particle() {
    this.a = new ParticleActor;
    this.a.particle = this;
    this.count = 1;
    this.way = 0;
    this.wayWidth = 360;
    this.speed = 0.01;
    this.color = Color.white;
    this.size = 0.02;
    this.duration = 30;
  }

  return Particle;

})();

ParticleActor = (function(_super) {
  __extends(ParticleActor, _super);

  function ParticleActor() {
    return ParticleActor.__super__.constructor.apply(this, arguments);
  }

  ParticleActor.prototype.initialize = function() {
    return this.setDisplayPriority(0);
  };

  ParticleActor.prototype.update = function() {
    var i, p, pp, ww, _i, _ref;
    if (this.particle != null) {
      this.r;
      pp = this.particle;
      if (pp.number < 1) {
        return;
      }
      ww = pp.wayWidth / 2;
      for (i = _i = 1, _ref = pp.number; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        p = new ParticleActor;
        p.p.v(pp.pos);
        p.v.aw(pp.way + ((-ww).rr(ww)), pp.speed * (0.5.rr(1.5)));
        p.color = pp.color;
        p.size = pp.size;
        p.duration = pp.duration * (0.5.rr(1.5));
      }
      return;
    }
    Display.fillRect(this.p.x, this.p.y, this.size, this.size, this.color);
    if (this.t >= this.duration - 1) {
      return this.r;
    }
  };

  return ParticleActor;

})(Actor);

Mouse = (function() {
  function Mouse() {}

  Mouse.classGetter('pos', function() {
    return this.p;
  });

  Mouse.classGetter('isPressing', function() {
    return this.ip;
  });

  Mouse.classGetter('isPressed', function() {
    return this.ipd;
  });

  Mouse.classGetter('isMoving', function() {
    return this.im;
  });

  Mouse.initialize = function() {
    this.p = new Vector().n(.5);
    this.ip = this.ipd = this.wasPressing = this.im = this.wasMoving = false;
    this.pressedDisabledCount = 0;
    Display.e.addEventListener('mousedown', this.onMouseDown);
    Display.e.addEventListener('mousemove', this.onMouseMove);
    Display.e.addEventListener('mouseup', this.onMouseUp);
    Display.e.addEventListener('touchstart', this.onTouchStart);
    Display.e.addEventListener('touchmove', this.onTouchMove);
    return Display.e.addEventListener('touchend', this.onTouchEnd);
  };

  Mouse.onMouseMove = function(e) {
    var rect;
    e.preventDefault();
    Mouse.wasMoving = true;
    rect = e.target.getBoundingClientRect();
    Mouse.p.x = ((e.pageX - rect.left) / Display.size.x).c(0, 1);
    return Mouse.p.y = ((e.pageY - rect.top) / Display.size.y).c(0, 1);
  };

  Mouse.onMouseDown = function(e) {
    Mouse.ip = true;
    Mouse.onMouseMove(e);
    return G.onfocus();
  };

  Mouse.onMouseUp = function(e) {
    return Mouse.ip = false;
  };

  Mouse.onTouchMove = function(e) {
    var rect, touch;
    e.preventDefault();
    Mouse.wasMoving = true;
    rect = e.target.getBoundingClientRect();
    touch = e.touches[0];
    Mouse.p.x = ((touch.pageX - rect.left) / Display.size.x).c(0, 1);
    return Mouse.p.y = ((touch.pageY - rect.top) / Display.size.y).c(0, 1);
  };

  Mouse.onTouchStart = function(e) {
    Mouse.ip = true;
    Mouse.onTouchMove(e);
    return G.onfocus();
  };

  Mouse.onTouchEnd = function(e) {
    return Mouse.ip = false;
  };

  Mouse.update = function() {
    this.ipd = false;
    if (this.ip) {
      if (!this.wasPressing) {
        if (this.pressedDisabledCount <= 0) {
          this.ipd = true;
        }
      }
    } else {
      this.pressedDisabledCount--;
    }
    this.wasPressing = this.ip;
    if (this.wasMoving) {
      this.im = true;
      return this.wasMoving = false;
    } else {
      return this.im = false;
    }
  };

  Mouse.setPressedDisabledCount = function(c) {
    this.pressedDisabledCount = c;
    return this.ipd = false;
  };

  return Mouse;

})();

Key = (function() {
  function Key() {}

  Key.classGetter('isPressing', function() {
    return this.ip;
  });

  Key.initialize = function() {
    this.ip = (function() {
      var _i, _results;
      _results = [];
      for (_i = 0; _i <= 255; _i++) {
        _results.push(false);
      }
      return _results;
    })();
    window.onkeydown = (function(_this) {
      return function(e) {
        var _ref;
        _this.ip[e.keyCode] = true;
        if ((37 <= (_ref = e.keyCode) && _ref <= 40)) {
          return e.preventDefault();
        }
      };
    })(this);
    return window.onkeyup = (function(_this) {
      return function(e) {
        return _this.ip[e.keyCode] = false;
      };
    })(this);
  };

  return Key;

})();

Sound = (function() {
  Sound.setSeed = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.sd.apply(this, args);
  };

  Sound.sd = function(seed) {
    return this.random.sd(seed);
  };

  Sound.setQuantize = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.q.apply(this, args);
  };

  Sound.q = function(quantize) {
    this.quantize = quantize != null ? quantize : 1;
  };

  function Sound() {
    Sound.s.push(this);
    this.volume = 1;
  }

  Sound.prototype.setVolume = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.v.apply(this, args);
  };

  Sound.prototype.v = function(volume) {
    this.volume = volume;
    return this;
  };

  Sound.prototype.setParam = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.pr.apply(this, args);
  };

  Sound.prototype.pr = function(param) {
    this.param = param;
    if (!Sound.isEnabled) {
      return this;
    }
    this.param[2] *= this.volume;
    this.buffer = WebAudiox.getBufferFromJsfx(Sound.c, this.param);
    return this;
  };

  Sound.prototype.changeParam = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.cpr.apply(this, args);
  };

  Sound.prototype.cpr = function(index, ratio) {
    if (!Sound.isEnabled) {
      return this;
    }
    this.param[index] *= ratio;
    this.buffer = WebAudiox.getBufferFromJsfx(Sound.c, this.param);
    return this;
  };

  Sound.prototype.setDrum = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.d.apply(this, args);
  };

  Sound.prototype.d = function(seed) {
    if (seed == null) {
      seed = 0;
    }
    this.pr(Sound.generateDrumParam(seed));
    return this;
  };

  Sound.prototype.setPattern = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.pt.apply(this, args);
  };

  Sound.prototype.pt = function(pattern, patternInterval) {
    this.pattern = pattern;
    this.patternInterval = patternInterval != null ? patternInterval : 0.25;
    return this;
  };

  Sound.prototype.setDrumPattern = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.dp.apply(this, args);
  };

  Sound.prototype.dp = function(seed, patternInterval) {
    if (seed == null) {
      seed = 0;
    }
    if (patternInterval == null) {
      patternInterval = 0.25;
    }
    this.pt(Sound.generateDrumPattern(seed), patternInterval);
    return this;
  };

  Sound.prototype.play = function() {
    return this.p;
  };

  Sound.getter('p', function() {
    if (!Game.ib || !Sound.isEnabled) {
      return this;
    }
    this.isPlayingOnce = true;
    return this;
  });

  Sound.prototype.playNow = function() {
    return this.pn;
  };

  Sound.getter('pn', function() {
    if (!Game.ib || !Sound.isEnabled) {
      return this;
    }
    this.playLater(0);
    return this;
  });

  Sound.prototype.playPattern = function() {
    return this.pp;
  };

  Sound.getter('pp', function() {
    if (!Game.ib || !Sound.isEnabled) {
      return this;
    }
    this.isPlayingLoop = true;
    this.scheduledTime = null;
    return this;
  });

  Sound.generateParam = function(seed, params, mixRatio) {
    var ci, cp, i, p, pl, psl, random, rt, _i, _ref;
    if (mixRatio == null) {
      mixRatio = 0.5;
    }
    random = seed !== 0 ? new Random(seed) : this.random;
    psl = params.length;
    i = random.ri(0, psl - 1);
    p = params[i].concat();
    pl = p.length;
    while (random.r() < mixRatio) {
      ci = random.ri(0, psl - 1);
      cp = params[ci];
      for (i = _i = 1, _ref = pl - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        rt = random.r();
        p[i] = p[i] * rt + cp[i] * (1 - rt);
      }
    }
    return p;
  };

  Sound.initialize = function() {
    var error;
    try {
      this.c = new AudioContext;
      this.gn = Sound.c.createGain();
      this.gn.gain.value = Config.soundVolume;
      this.gn.connect(Sound.c.destination);
      this.isEnabled = true;
    } catch (_error) {
      error = _error;
      this.isEnabled = false;
    }
    this.playInterval = 60 / Config.soundTempo;
    this.scheduleInterval = 1 / Config.fps * 2;
    this.quantize = 0.5;
    this.clear();
    this.initDrumParams();
    this.initDrumPatterns();
    return this.random = new Random;
  };

  Sound.clear = function() {
    return this.s = [];
  };

  Sound.reset = function() {
    var s, _i, _len, _ref, _results;
    _ref = this.s;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _results.push(s.reset());
    }
    return _results;
  };

  Sound.update = function() {
    var ct, s, tt, _i, _len, _ref, _results;
    if (Game.isPaused || !Game.ib || !this.isEnabled) {
      return;
    }
    ct = this.c.currentTime;
    tt = ct + this.scheduleInterval;
    _ref = this.s;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _results.push(s.update(ct, tt));
    }
    return _results;
  };

  Sound.initDrumParams = function() {
    return this.drumParams = [["sine", 0, 3, 0, 0.1740, 0.1500, 0.2780, 20, 528, 2400, -0.6680, 0, 0, 0.0100, 0.0003, 0, 0, 0, 0.5000, -0.2600, 0, 0.1000, 0.0900, 1, 0, 0, 0.1240, 0], ["square", 0, 2, 0, 0, 0, 0.1, 20, 400, 2000, -1, 0, 0, 0, 0.5, 0, 0, 0, 0.5, -0.5, 0, 0, 0.5, 1, 0, 0, 0.75, -1], ["noise", 0, 2, 0, 0, 0, 0.1, 1300, 500, 2400, 1, -1, 1, 40, 1, 0, 1, 0, 0, 0, 0, 0.75, 0.25, 1, -1, 1, 0.25, -1], ["noise", 0, 2, 0, 0, 0, 0.05, 2400, 2400, 2400, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -0.15, 0.1, 1, 1, 0, 1, 1], ["noise", 0, 2, 0, 0.0360, 0, 0.2860, 20, 986, 2400, -0.6440, 0, 0, 0.0100, 0.0003, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], ["saw", 0, 1, 0, 0.1140, 0, 0.2640, 20, 880, 2400, -0.6000, 0, 0, 0.0100, 0.0003, 0, 0, 0, 0.5000, -0.3620, 0, 0, 0, 1, 0, 0, 0, 0], ["synth", 0, 2, 0, 0.2400, 0.0390, 0.1880, 328, 1269, 2400, -0.8880, 0, 0, 0.0100, 0.0003, 0, 0, 0, 0.4730, 0.1660, 0, 0.1700, 0.1880, 1, 0, 0, 0.1620, 0]];
  };

  Sound.initDrumPatterns = function() {
    return this.drumPatterns = ['0000010000000001', '0000100000001000', '0000100100001000', '0000100001001000', '0000101111001000', '0000100100101000', '0000100000001010', '0001000001000101', '0010001000100010', '0010001000100010', '0100000010010000', '1000100010001000', '1010010010100101', '1101000001110111', '1000100000100010', '1010101010101010', '1000100011001000', '1111000001110110', '1111101010111010'];
  };

  Sound.generateDrumParam = function(seed) {
    return this.generateParam(seed, this.drumParams);
  };

  Sound.generateSeParam = function(type, seed) {
    return this.generateParam(seed, this.seParams[type], 0.75);
  };

  Sound.generateDrumPattern = function(seed) {
    var c, cd, cdp, ci, d, dp, dpa, dpl, dpsl, gdp, i, random, _i, _j, _k, _len, _ref, _ref1;
    random = seed !== 0 ? new Random(seed) : this.random;
    dpsl = this.drumPatterns.length;
    i = random.ri(0, dpsl - 1);
    dp = this.drumPatterns[i];
    dpl = dp.length;
    dpa = [];
    for (i = _i = 0, _ref = dpl - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      d = dp.charAt(i);
      dpa.push(d === '1' ? true : false);
    }
    while (random.r() < .5) {
      ci = random.ri(0, dpsl - 1);
      cdp = this.drumPatterns[ci];
      for (i = _j = 0, _ref1 = dpl - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        cd = cdp.charAt(i);
        c = cd === '1' ? true : false;
        dpa[i] = (!dpa[i]) !== (!c);
      }
    }
    gdp = '';
    for (_k = 0, _len = dpa.length; _k < _len; _k++) {
      d = dpa[_k];
      gdp += d ? '1' : '0';
    }
    return gdp;
  };

  Sound.prototype.reset = function() {
    return this.isPlayingOnce = this.isPlayingLoop = null;
  };

  Sound.prototype.update = function(ct, tt) {
    var pi, pt;
    if (this.isPlayingOnce != null) {
      this.isPlayingOnce = null;
      pi = Sound.playInterval * Sound.quantize;
      pt = ceil(ct / pi) * pi;
      if ((this.playedTime == null) || pt > this.playedTime) {
        this.playLater(pt);
        this.playedTime = pt;
      }
    }
    if (this.isPlayingLoop == null) {
      return;
    }
    if (this.scheduledTime == null) {
      this.scheduledTime = ceil(ct / Sound.playInterval) * Sound.playInterval - Sound.playInterval * this.patternInterval;
      this.patternIndex = 0;
      this.calcNextScheduledTime();
    }
    while (this.scheduledTime < ct) {
      this.calcNextScheduledTime();
    }
    while (this.scheduledTime <= tt) {
      this.playLater(this.scheduledTime);
      this.calcNextScheduledTime();
    }
  };

  Sound.prototype.calcNextScheduledTime = function() {
    var i, p, pn, sti, _i;
    pn = this.pattern.length;
    sti = Sound.playInterval * this.patternInterval;
    for (i = _i = 0; _i <= 99; i = ++_i) {
      this.scheduledTime += sti;
      p = this.pattern.charAt(this.patternIndex);
      this.patternIndex = (this.patternIndex + 1).lr(0, pn);
      if (p === '1') {
        break;
      }
    }
  };

  Sound.prototype.playLater = function(delay) {
    var s;
    s = Sound.c.createBufferSource();
    s.buffer = this.buffer;
    s.connect(Sound.gn);
    s.start = s.start || s.noteOn;
    return s.start(delay);
  };

  return Sound;

})();

Random = (function() {
  Random.prototype.range = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.r.apply(this, args);
  };

  Random.prototype.r = function(from, to) {
    if (from == null) {
      from = 0;
    }
    if (to == null) {
      to = 1;
    }
    return this.get0to1() * (to - from) + from;
  };

  Random.prototype.rangeInt = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.ri.apply(this, args);
  };

  Random.prototype.ri = function(from, to) {
    if (from == null) {
      from = 0;
    }
    if (to == null) {
      to = 1;
    }
    return floor(this.r(from, to + 1));
  };

  Random.prototype.plusMinus = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.pm.apply(this, args);
  };

  Random.getter('pm', function() {
    return (this.ri(0, 1)) * 2 - 1;
  });

  Random.prototype.setSeed = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.sd.apply(this, args);
  };

  Random.prototype.sd = function(v) {
    var sv;
    if (v == null) {
      v = -0x7fffffff;
    }
    sv = v === -0x7fffffff ? floor(Math.random() * 0x7fffffff) : v;
    this.x = sv = 1812433253 * (sv ^ (sv >> 30));
    this.y = sv = 1812433253 * (sv ^ (sv >> 30)) + 1;
    this.z = sv = 1812433253 * (sv ^ (sv >> 30)) + 2;
    this.w = sv = 1812433253 * (sv ^ (sv >> 30)) + 3;
    return this;
  };

  function Random() {
    this.sd();
  }

  Random.prototype.get0to1 = function() {
    var t;
    t = this.x ^ (this.x << 11);
    this.x = this.y;
    this.y = this.z;
    this.z = this.w;
    this.w = (this.w ^ (this.w >> 19)) ^ (t ^ (t >> 8));
    return this.w / 0x7fffffff;
  };

  return Random;

})();

Vector = (function() {
  Vector.prototype.setXy = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.xy.apply(this, args);
  };

  Vector.prototype.xy = function(x, y) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    return this;
  };

  Vector.prototype.setNumber = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.n.apply(this, args);
  };

  Vector.prototype.n = function(v) {
    if (v == null) {
      v = 0;
    }
    this.xy(v, v);
    return this;
  };

  Vector.prototype.setValue = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.v.apply(this, args);
  };

  Vector.prototype.v = function(v) {
    this.x = v.x;
    this.y = v.y;
    return this;
  };

  Vector.prototype.add = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.a.apply(this, args);
  };

  Vector.prototype.a = function(v) {
    this.x += v.x;
    this.y += v.y;
    return this;
  };

  Vector.prototype.sub = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.s.apply(this, args);
  };

  Vector.prototype.s = function(v) {
    this.x -= v.x;
    this.y -= v.y;
    return this;
  };

  Vector.prototype.mul = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.m.apply(this, args);
  };

  Vector.prototype.m = function(v) {
    this.x *= v;
    this.y *= v;
    return this;
  };

  Vector.prototype.div = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.d.apply(this, args);
  };

  Vector.prototype.d = function(v) {
    this.x /= v;
    this.y /= v;
    return this;
  };

  Vector.prototype.addWay = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.aw.apply(this, args);
  };

  Vector.prototype.aw = function(way, speed) {
    var rw;
    rw = way * PI / 180;
    this.x += (sin(rw)) * speed;
    this.y -= (cos(rw)) * speed;
    return this;
  };

  Vector.prototype.rotate = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.rt.apply(this, args);
  };

  Vector.prototype.rt = function(way) {
    var px, w;
    if (way === 0) {
      return this;
    }
    w = way * PI / 180;
    px = this.x;
    this.x = this.x * (cos(w)) - this.y * (sin(w));
    this.y = px * (sin(w)) + this.y * (cos(w));
    return this;
  };

  Vector.prototype.distanceTo = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.dt.apply(this, args);
  };

  Vector.prototype.dt = function(pos) {
    var ox, oy;
    ox = pos.x - this.x;
    oy = pos.y - this.y;
    return sqrt(ox * ox + oy * oy);
  };

  Vector.prototype.wayTo = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.wt.apply(this, args);
  };

  Vector.prototype.wt = function(pos) {
    return (atan2(pos.x - this.x, -(pos.y - this.y))) * 180 / PI;
  };

  Vector.prototype.isIn = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.ii.apply(this, args);
  };

  Vector.prototype.ii = function(spacing, minX, maxX, minY, maxY) {
    var _ref, _ref1;
    if (spacing == null) {
      spacing = 0;
    }
    if (minX == null) {
      minX = 0;
    }
    if (maxX == null) {
      maxX = 1;
    }
    if (minY == null) {
      minY = 0;
    }
    if (maxY == null) {
      maxY = 1;
    }
    return (minX - spacing <= (_ref = this.x) && _ref <= maxX + spacing) && (minY - spacing <= (_ref1 = this.y) && _ref1 <= maxY + spacing);
  };

  Vector.prototype.getWay = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.w;
  };

  Vector.getter('w', function() {
    return (atan2(this.x, -this.y)) * 180 / PI;
  });

  Vector.prototype.getLength = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.l;
  };

  Vector.getter('l', function() {
    return sqrt(this.x * this.x + this.y * this.y);
  });

  function Vector(x, y) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
  }

  return Vector;

})();

Config = (function() {
  function Config() {}

  Config.fps = 60;

  Config.backgroundColor = '#000';

  Config.soundTempo = 120;

  Config.soundVolume = 0.02;

  Config.title = ['MGL.', 'COFFEE'];

  return Config;

})();

PI = Math.PI;

sin = Math.sin;

cos = Math.cos;

atan2 = Math.atan2;

abs = Math.abs;

sqrt = Math.sqrt;

floor = Math.floor;

ceil = Math.ceil;

max = Math.max;

min = Math.min;

Number.prototype.clamp = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return this.c.apply(this, args);
};

Number.prototype.c = function(min, max) {
  if (min == null) {
    min = 0;
  }
  if (max == null) {
    max = 1;
  }
  if (this < min) {
    return min;
  } else if (this > max) {
    return max;
  } else {
    return this;
  }
};

Number.prototype.loopRange = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return this.lr.apply(this, args);
};

Number.prototype.lr = function(min, max) {
  var v, w;
  if (min == null) {
    min = 0;
  }
  if (max == null) {
    max = 1;
  }
  w = max - min;
  v = this;
  v -= min;
  if (v >= 0) {
    return v % w + min;
  } else {
    return w + v % w + min;
  }
};

Number.prototype.normalizeWay = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return this.nw.apply(this, args);
};

Number.prototype.nw = function() {
  return (this % 360).lr(-180, 180);
};

Number.prototype.randomRange = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return this.rr.apply(this, args);
};

Number.prototype.rr = function(to) {
  if (to == null) {
    to = 1;
  }
  return Game.r.r(this, to);
};

Number.prototype.randomRangeInt = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return this.rri.apply(this, args);
};

Number.prototype.rri = function(to) {
  if (to == null) {
    to = 1;
  }
  return Game.r.ri(this, to);
};

A = Actor;

C = Color;

G = Game;

M = Mouse;
